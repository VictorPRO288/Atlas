import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# üîπ –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7973682034:AAF1hOAXBuWX5ylEjhMcSmDDGeJhnFb26qs"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–æ—Ä–æ–¥–∞ –∏ –∏—Ö ID
places = {
    "Novogrudok": "c624785",
    "Minsk": "c625144"
}

# –î–∞—Ç—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
date_novogrudok_minsk = "2025-06-01"
date_minsk_novogrudok = "2025-05-31"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
last_sent_novogrudok_minsk = None
last_sent_minsk_novogrudok = None
# –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (True - –æ–±–∞ –º–∞—Ä—à—Ä—É—Ç–∞, False - –æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç)
monitor_both_routes = True
# –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
current_route = "novogrudok-minsk"

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
subscribers = set()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
choose_direction_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫")],
        [KeyboardButton(text="–ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
def split_message(text, max_length=4000):
    parts = []
    while len(text) > max_length:
        split_index = text[:max_length].rfind("\n")  # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:]
    parts.append(text)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
    return parts

# üì© –ö–æ–º–∞–Ω–¥–∞ /start (–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫)
@dp.message(Command("start"))
async def start(message: Message):
    subscribers.add(message.chat.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /bus, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /setdate YYYY-MM-DD –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /setroute novogrudok-minsk –∏–ª–∏ minsk-novogrudok –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞.")


# üîÑ –ö–æ–º–∞–Ω–¥–∞ /monitor –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@dp.message(Command("monitor"))
async def toggle_monitoring(message: Message):
    global monitor_both_routes
    try:
        mode = message.text.split()[1].lower()
        if mode in ["both", "single"]:
            monitor_both_routes = (mode == "both")
            status = "–æ–±–∞ –º–∞—Ä—à—Ä—É—Ç–∞" if monitor_both_routes else f"–æ–¥–∏–Ω –º–∞—Ä—à—Ä—É—Ç ({current_route})"
            await message.answer(f"‚úÖ –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω—ë–Ω: {status}")
        else:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /monitor both –∏–ª–∏ /monitor single")
    except IndexError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /monitor both –∏–ª–∏ /monitor single")

# üóì –ö–æ–º–∞–Ω–¥–∞ /setdates –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç –≤ –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(Command("setdates"))
async def set_dates(message: Message):
    global date_novogrudok_minsk, date_minsk_novogrudok
    try:
        _, date1, date2 = message.text.split()
        date_novogrudok_minsk = date1
        date_minsk_novogrudok = date2
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫‚Üí–ú–∏–Ω—Å–∫: {date1}\n‚úÖ –î–∞—Ç–∞ –ú–∏–Ω—Å–∫‚Üí–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫: {date2}")
    except Exception:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setdates YYYY-MM-DD YYYY-MM-DD")

# üöç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bus (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
@dp.message(Command("bus"))
async def send_bus_info(message: Message):
    global current_route, monitor_both_routes
    sent = False

    # –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫
    if monitor_both_routes or current_route == "novogrudok-minsk":
        url1 = f'https://atlasbus.by/api/search?from_id={places["Novogrudok"]}&to_id={places["Minsk"]}&calendar_width=30&date={date_novogrudok_minsk}&passengers=1'
        response1 = requests.get(url1)
        msg1 = ""
        if response1.status_code == 200:
            data1 = response1.json().get('rides', [])
            available1 = [ride for ride in data1 if ride["freeSeats"] > 0]
            if available1:
                msg1 += f"‚úÖ –ë–∏–ª–µ—Ç—ã –Ω–∞ {date_novogrudok_minsk} (–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫):\n\n"
                for ride in available1:
                    msg1 += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"
                    if ride['pickupStops']:
                        stop = ride['pickupStops'][0]
                        msg1 += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"
                    msg1 += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
                    for stop in ride['dischargeStops']:
                        msg1 += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"
                    msg1 += "\n" + "#" * 30 + "\n\n"
        if msg1:
            for part in split_message(msg1):
                await message.answer(part, parse_mode="Markdown")
            sent = True

    # –ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫
    if monitor_both_routes or current_route == "minsk-novogrudok":
        url2 = f'https://atlasbus.by/api/search?from_id={places["Minsk"]}&to_id={places["Novogrudok"]}&calendar_width=30&date={date_minsk_novogrudok}&passengers=1'
        response2 = requests.get(url2)
        msg2 = ""
        if response2.status_code == 200:
            data2 = response2.json().get('rides', [])
            available2 = [ride for ride in data2 if ride["freeSeats"] > 0]
            if available2:
                msg2 += f"‚úÖ –ë–∏–ª–µ—Ç—ã –Ω–∞ {date_minsk_novogrudok} (–ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫):\n\n"
                for ride in available2:
                    msg2 += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"
                    if ride['pickupStops']:
                        stop = ride['pickupStops'][0]
                        msg2 += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"
                    msg2 += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
                    for stop in ride['dischargeStops']:
                        msg2 += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"
                    msg2 += "\n" + "#" * 30 + "\n\n"
        if msg2:
            for part in split_message(msg2):
                await message.answer(part, parse_mode="Markdown")
            sent = True

    if not sent:
        await message.answer("‚ùå –ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

# üö® –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
@dp.message(Command("stop"))
async def stop(message: Message):
    global periodic_task
    if periodic_task is not None:
        periodic_task.cancel()
        periodic_task = None
        await message.answer("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
last_sent_rides = None

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤
async def get_new_bus_info():
    global selected_date, selected_route, last_sent_rides

    if selected_route == "novogrudok-minsk":
        from_city, to_city = places["Novogrudok"], places["Minsk"]
    else:
        from_city, to_city = places["Minsk"], places["Novogrudok"]

    url = f'https://atlasbus.by/api/search?from_id={from_city}&to_id={to_city}&calendar_width=30&date={selected_date}&passengers=1'
    response = requests.get(url)
    
    if response.status_code != 200:
        return None

    data = response.json().get('rides', [])
    available_rides = [ride for ride in data if ride["freeSeats"] > 0]

    # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–π—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç)
    current_rides = set(f"{ride['id']}_{ride['freeSeats']}" for ride in available_rides)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if last_sent_rides is None:
        last_sent_rides = current_rides
        return None

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ä–µ–π—Å—ã –∏–ª–∏ —Ç–µ, –≥–¥–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    new_rides = [ride for ride in available_rides if f"{ride['id']}_{ride['freeSeats']}" not in last_sent_rides]

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if not new_rides and current_rides == last_sent_rides:
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
    last_sent_rides = current_rides

    route_name = "–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫" if selected_route == "novogrudok-minsk" else "–ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫"
    message = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –±–∏–ª–µ—Ç–∞–º –Ω–∞ {selected_date} ({route_name})\n\nüöå **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:**\n\n"

    for ride in available_rides:
        message += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"
        if ride['pickupStops']:
            stop = ride['pickupStops'][0]
            message += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"
        message += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
        for stop in ride['dischargeStops']:
            message += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"
        message += "\n" + "#" * 30 + "\n\n"

    return message

# üïí –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
async def periodic_request():
    global last_sent_novogrudok_minsk, last_sent_minsk_novogrudok
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫
        if monitor_both_routes or current_route == "novogrudok-minsk":
            url1 = f'https://atlasbus.by/api/search?from_id={places["Novogrudok"]}&to_id={places["Minsk"]}&calendar_width=30&date={date_novogrudok_minsk}&passengers=1'
            response1 = requests.get(url1)
            rides1 = []
            if response1.status_code == 200:
                data1 = response1.json().get('rides', [])
                rides1 = [
                    (ride['id'], ride['freeSeats'])
                    for ride in data1 if ride["freeSeats"] > 0
                ]
            set1 = set(rides1)

            if last_sent_novogrudok_minsk is None:
                last_sent_novogrudok_minsk = set1
            elif set1 != last_sent_novogrudok_minsk:
                msg = ""
                if rides1:
                    msg += f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ {date_novogrudok_minsk} (–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫ ‚Üí –ú–∏–Ω—Å–∫):\n\n"
                    for ride in data1:
                        if ride["freeSeats"] > 0:
                            msg += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"
                            if ride['pickupStops']:
                                stop = ride['pickupStops'][0]
                                msg += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"
                            msg += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
                            for stop in ride['dischargeStops']:
                                msg += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"
                            msg += "\n" + "#" * 30 + "\n\n"
                    for part in split_message(msg):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                        for chat_id in subscribers:
                            await bot.send_message(chat_id, part, parse_mode="Markdown")
                last_sent_novogrudok_minsk = set1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç –ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫
        if monitor_both_routes or current_route == "minsk-novogrudok":
            url2 = f'https://atlasbus.by/api/search?from_id={places["Minsk"]}&to_id={places["Novogrudok"]}&calendar_width=30&date={date_minsk_novogrudok}&passengers=1'
            response2 = requests.get(url2)
            rides2 = []
            if response2.status_code == 200:
                data2 = response2.json().get('rides', [])
                rides2 = [
                    (ride['id'], ride['freeSeats'])
                    for ride in data2 if ride["freeSeats"] > 0
                ]
            set2 = set(rides2)

            if last_sent_minsk_novogrudok is None:
                last_sent_minsk_novogrudok = set2
            elif set2 != last_sent_minsk_novogrudok:
                msg = ""
                if rides2:
                    msg += f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ {date_minsk_novogrudok} (–ú–∏–Ω—Å–∫ ‚Üí –ù–æ–≤–æ–≥—Ä—É–¥–æ–∫):\n\n"
                    for ride in data2:
                        if ride["freeSeats"] > 0:
                            msg += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"
                            if ride['pickupStops']:
                                stop = ride['pickupStops'][0]
                                msg += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"
                            msg += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
                            for stop in ride['dischargeStops']:
                                msg += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"
                            msg += "\n" + "#" * 30 + "\n\n"
                    for part in split_message(msg):
                        for chat_id in subscribers:
                            await bot.send_message(chat_id, part, parse_mode="Markdown")
                last_sent_minsk_novogrudok = set2

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@dp.startup()
async def on_startup(dispatcher):
    asyncio.create_task(periodic_request())

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global periodic_task
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤
    periodic_task = asyncio.create_task(periodic_request())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
